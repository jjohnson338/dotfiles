# Structure
snippet class
abbr    class {}
    class ${1:#:Name} ${2::} ${3:Parent}${4:,} ${5:Interface} {
        ${0:TARGET}
    }

snippet struct
abbr    struct {}
    struct ${1:#:Name} ${2::} ${3:Interface} {
        ${0:TARGET}
    }

snippet interface
abbr    interface {}
    interface ${1:#:IName} ${2::} ${3:Parent} {
        ${0:TARGET}
    }

snippet method
    ${1:void} ${2:#:Method}(${3:#:arguments}) {
        ${0:TARGET}
    }

snippet enum
abbr    enum {}
    enum ${1:#:Name} {
        ${0:TARGET}
    }


# Declare
snippet delegate
    delegate ${1:void} ${2:#:Delegate}(${3:#:arguments});${0}

snippet property
alias   prop
options word
    public ${1:string} ${2:#:Name} { get; set; }${0}

snippet get
abbr    get {}
    get {${1:TARGET}}${0}

snippet set
abbr    set {}
    set {${1:TARGET}}${0}

snippet region
alias   reg
options head
    #region ${1:#:name}
        ${0:TARGET}
    #endregion


# Syntax
snippet if
abbr    if () {}
    if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet elseif
alias   elif
abbr    else if () {}
    else if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet ifelse
alias   ifel
abbr    if () {} else {}
    if (${1:#:condition}) {
        ${2:TARGET}
    } else {
        ${3:TARGET}
    }

snippet while
abbr    while () {}
    while (${1:#:condition}) {
        ${0:TARGET}
    }

snippet for
abbr    for () {}
    for (${1:#:var}; ${2:#:condition}; ${3:#:effect}) {
        ${0:TARGET}
    }

snippet foreach
alias   fore
abbr    foreach () {}
    foreach (${1:#:var} in ${2:#:iter}) {
        ${0:TARGET}
    }

snippet switch
abbr    switch () {}
    switch (${1:#:var}) {
    case ${2:#:val}:
        ${0:TARGET}
        break;
    }

snippet case
options head
    case ${1:#:val}:
        ${0:TARGET}
        break;

snippet break
options head
    break;

snippet default
options head
    default:
        ${0:TARGET}
        break;

snippet try_without_catch_nor_finally
alias   try_n
options head
    try {
        ${0:TARGET}
    }

snippet try_catch
alias   try
abbr    try {} catch () {}
options head
    try {
        ${0:TARGET}
    } catch (${1:Exception} ${2:e}) {
        ${3:Console.WriteLine(e.Message);}
    }

snippet try_catch_n
alias   try_cn
abbr    try {} catch {}
options head
    try {
        ${0:TARGET}
    } catch {
        ${1}
    }

snippet try_catch_finally
alias   try_cf
abbr    try {} catch () {} finally {}
options head
    try {
        ${0:TARGET}
    } catch (${1:Exception} ${2:e}) {
        ${3:Console.WriteLine(e.Message);}
    } finally {
        ${4}
    }

snippet try_finally
alias   try_f
abbr    try {} finally {}
options head
    try {
        ${0:TARGET}
    } finally {
        ${1}
    }

snippet try_catch_n_finally
alias   try_cnf
abbr    try {} catch {} finally {}
options head
    try {
        ${0:TARGET}
    } catch {
        ${1}
    } finally {
        ${2}
    }

snippet catch
abbr    catch () {}
    catch (${1:Exception} ${2:e}) {
        ${0:Console.WriteLine(e.Message);}
    }

snippet catch_n
abbr    catch {}
    catch {
        ${0}
    }

snippet finally
alias   fin
abbr    finally {}
    finally {
        ${0:TARGET}
    }

snippet throw
options head
    throw ${0:#:exception}

snippet lock
abbr    lock () {}
options head
    lock (${1:#:resource}) {
        ${0:TARGET}
    }

snippet using_resource
alias   using resource
abbr    using () {}
options head
    using (${1:#:resource}) {
        ${0:TARGET}
    }

# Import Path
snippet s.l
    System.Linq

snippet s.c.g
    System.Collections.Generic

snippet s.t
    System.Text

snippet s.i
    System.IO

snippet s.d
    System.Diagnostics

snippet s.r.c
    System.Runtie.CompilerServices


# Attribute
snippet serializable
alias   serial
options head
    [SerializableAttribute]

snippet conditional
alias   cond
options head
    [Conditional("${1:#:SYMBOL}")]${0}

snippet obsolete
alias   obs dep deprecated
options head
    [Obsolete("${1:#:description}")]${0}

snippet asm_internals_visible_to
alias   internals asmInternalsVisibleTo friend_attr
options head
    [assembly: InternalsVisibleTo("${1:#:FriendName}")]${0}


#XML Document
snippet c
abbr    <c></c>
    <c>${1:#:text}</c>

snippet code
abbr    <code></code>
    <code>${0:#:content}</code>

snippet example
abbr    <example></example>
    <example>${0:#:description}</example>

snippet exception
abbr    <exception cref=""></exception>
    <exception cref="${1:#:class}">${2:#:description}</exception>

snippet include
abbr    <include file='' path=''/>
    <include file='${1:#:filename}' path='${2:#:tabpath}[@${3:#:name}="${4:#:id}"]'/>

snippet param
abbr    <param name=""></param>
    <param name="${1:#:name}">${0:#:description}</param>

snippet paramref
abbr    <paramref name=""/>
    <paramref name="${1:#:name}"/>

snippet returns
abbr    <returns></returns>
    <returns>${0:#:description}</returns>

snippet remarks
abbr    <remarks></remarks>
    <remarks>${0:#:description}</remarks>

snippet summary
abbr    <summary></summary>
    <summary>${0:#:description}</summary>

snippet typeparam
abbr    <typeparam name=""></typeparam>
    <typeparam name="${1:#:name}">${0:#:description}</typeparam>

snippet typeparamref
abbr    <typeparamref name=""/>
    <typeparamref name="${1:#:name}"/>

snippet value
abbr    <value></value>
    <value>${0:#:description}</value>


# Other
snippet main
options head
    public static void Main(string[] args) {
        ${0}
    }

snippet writeline
alias   println p
options head
    Console.WriteLine(${1:#:message});${0}

snippet write
alias   print
options head
    Console.Write(${1:#:message});${0}


# MSTest
snippet testclass
alias   tc
options head
    [TestClass]
    public class ${1}Test {
        ${0:TARGET}
    }

snippet testinitialize
alias   ti
options head
    [TestInitialize]
    public void Setup() {
        ${0:TARGET}
    }

snippet testcleanup
alias   tc
options head
    [TestCleanup]
    public void Cleanup() {
        ${0:TARGET}
    }

snippet test
options head
    [TestMethod]
    public void Test${1:#:Name}() {
        ${0:TARGET}
    }
